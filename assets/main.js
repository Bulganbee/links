let channelBlocks = document.querySelector('#channel-blocks');
let showSeeButton = document.querySelector('#show-see-button');
let showListenButton = document.querySelector('#show-listen-button');
let showReadButton = document.querySelector('#show-read-button');
// Code from line 5 to 8 was taken from our class example from https://typography-interaction-2425.github.io/topic/javascript/#opening-a-modal
let button = document.querySelector('#example')
let modal = document.querySelector('#dialog') // Now one for our `dialog`.
let closeButton = modal.querySelector('.close') // Only looking within `modal`.

//Below code from line 6 to 14 was generated by ChatGPT
// Function to filter blocks based on type
const filterBlocks = (types) => {
    let allBlocks = channelBlocks.querySelectorAll('.block');
    allBlocks.forEach(block => {
        block.style.display = 'none'; // Hide all by default
        types.forEach(type => {
            if (block.classList.contains(type)) {
                block.style.display = 'block'; // Show matching types
            }
        });
    });
};

// Event listeners for buttons
showSeeButton.onclick = () => filterBlocks(['block-image', 'block-video']);
showListenButton.onclick = () => filterBlocks(['block-audio']);
showReadButton.onclick = () => filterBlocks(['block-link', 'block-pdf', 'block-text']);

//Below code was generated by ChatGPT
document.addEventListener("DOMContentLoaded", () => {
    filterBlocks(['block-image', 'block-video']); // Directly filter the "See" blocks
});




// Code from line 37 to 50 was taken from our class example from https://typography-interaction-2425.github.io/topic/javascript/#opening-a-modal
button.onclick = () => { // “Listen” for clicks.
	modal.showModal() // This opens it up.
}

closeButton.onclick = () => {
	modal.close() // And this closes it!
}

modal.onclick = (event) => { // Listen on our `modal` also…
	if (event.target == modal) { // Only if clicks are to itself (the background).
		modal.close() // Close it then too.
	}
}